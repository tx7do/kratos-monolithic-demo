// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: system/service/v1/menu.proto

package servicev1

import (
	_ "github.com/google/gnostic/openapiv3"
	v1 "github.com/tx7do/kratos-bootstrap/api/gen/go/pagination/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 菜单类型
type MenuType int32

const (
	MenuType_FOLDER MenuType = 0 // 菜单夹
	MenuType_MENU   MenuType = 1 // 菜单项
	MenuType_BUTTON MenuType = 2 // 按钮
)

// Enum value maps for MenuType.
var (
	MenuType_name = map[int32]string{
		0: "FOLDER",
		1: "MENU",
		2: "BUTTON",
	}
	MenuType_value = map[string]int32{
		"FOLDER": 0,
		"MENU":   1,
		"BUTTON": 2,
	}
)

func (x MenuType) Enum() *MenuType {
	p := new(MenuType)
	*p = x
	return p
}

func (x MenuType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MenuType) Descriptor() protoreflect.EnumDescriptor {
	return file_system_service_v1_menu_proto_enumTypes[0].Descriptor()
}

func (MenuType) Type() protoreflect.EnumType {
	return &file_system_service_v1_menu_proto_enumTypes[0]
}

func (x MenuType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MenuType.Descriptor instead.
func (MenuType) EnumDescriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{0}
}

// 菜单
type Menu struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *int32                 `protobuf:"varint,1,opt,name=id,proto3,oneof" json:"id,omitempty"`
	ParentId   *int32                 `protobuf:"varint,2,opt,name=parent_id,json=parentId,proto3,oneof" json:"parent_id,omitempty"`
	Status     *string                `protobuf:"bytes,3,opt,name=status,proto3,oneof" json:"status,omitempty"`
	Type       *MenuType              `protobuf:"varint,4,opt,name=type,proto3,enum=system.service.v1.MenuType,oneof" json:"type,omitempty"`
	Children   []*Menu                `protobuf:"bytes,5,rep,name=children,proto3" json:"children,omitempty"`
	Path       *string                `protobuf:"bytes,10,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Redirect   *string                `protobuf:"bytes,11,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	Alias      *string                `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Name       *string                `protobuf:"bytes,13,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Component  *string                `protobuf:"bytes,14,opt,name=component,proto3,oneof" json:"component,omitempty"`
	Meta       *RouteMeta             `protobuf:"bytes,15,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,30,opt,name=create_time,json=createTime,proto3,oneof" json:"create_time,omitempty"`
	UpdateTime *timestamppb.Timestamp `protobuf:"bytes,31,opt,name=update_time,json=updateTime,proto3,oneof" json:"update_time,omitempty"`
	DeleteTime *timestamppb.Timestamp `protobuf:"bytes,32,opt,name=delete_time,json=deleteTime,proto3,oneof" json:"delete_time,omitempty"`
}

func (x *Menu) Reset() {
	*x = Menu{}
	mi := &file_system_service_v1_menu_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Menu) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Menu) ProtoMessage() {}

func (x *Menu) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Menu.ProtoReflect.Descriptor instead.
func (*Menu) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{0}
}

func (x *Menu) GetId() int32 {
	if x != nil && x.Id != nil {
		return *x.Id
	}
	return 0
}

func (x *Menu) GetParentId() int32 {
	if x != nil && x.ParentId != nil {
		return *x.ParentId
	}
	return 0
}

func (x *Menu) GetStatus() string {
	if x != nil && x.Status != nil {
		return *x.Status
	}
	return ""
}

func (x *Menu) GetType() MenuType {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return MenuType_FOLDER
}

func (x *Menu) GetChildren() []*Menu {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *Menu) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *Menu) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *Menu) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *Menu) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *Menu) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *Menu) GetMeta() *RouteMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

func (x *Menu) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Menu) GetUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateTime
	}
	return nil
}

func (x *Menu) GetDeleteTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DeleteTime
	}
	return nil
}

// 路由项
type RouteItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Children  []*RouteItem `protobuf:"bytes,1,rep,name=children,proto3" json:"children,omitempty"`
	Path      *string      `protobuf:"bytes,10,opt,name=path,proto3,oneof" json:"path,omitempty"`
	Redirect  *string      `protobuf:"bytes,11,opt,name=redirect,proto3,oneof" json:"redirect,omitempty"`
	Alias     *string      `protobuf:"bytes,12,opt,name=alias,proto3,oneof" json:"alias,omitempty"`
	Name      *string      `protobuf:"bytes,13,opt,name=name,proto3,oneof" json:"name,omitempty"`
	Component *string      `protobuf:"bytes,14,opt,name=component,proto3,oneof" json:"component,omitempty"`
	Meta      *RouteMeta   `protobuf:"bytes,15,opt,name=meta,proto3,oneof" json:"meta,omitempty"`
}

func (x *RouteItem) Reset() {
	*x = RouteItem{}
	mi := &file_system_service_v1_menu_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteItem) ProtoMessage() {}

func (x *RouteItem) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteItem.ProtoReflect.Descriptor instead.
func (*RouteItem) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{1}
}

func (x *RouteItem) GetChildren() []*RouteItem {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *RouteItem) GetPath() string {
	if x != nil && x.Path != nil {
		return *x.Path
	}
	return ""
}

func (x *RouteItem) GetRedirect() string {
	if x != nil && x.Redirect != nil {
		return *x.Redirect
	}
	return ""
}

func (x *RouteItem) GetAlias() string {
	if x != nil && x.Alias != nil {
		return *x.Alias
	}
	return ""
}

func (x *RouteItem) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *RouteItem) GetComponent() string {
	if x != nil && x.Component != nil {
		return *x.Component
	}
	return ""
}

func (x *RouteItem) GetMeta() *RouteMeta {
	if x != nil {
		return x.Meta
	}
	return nil
}

// 路由元数据
type RouteMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActiveIcon               *string  `protobuf:"bytes,1,opt,name=active_icon,json=activeIcon,proto3,oneof" json:"active_icon,omitempty"`
	ActivePath               *string  `protobuf:"bytes,2,opt,name=active_path,json=activePath,proto3,oneof" json:"active_path,omitempty"`
	AffixTab                 *bool    `protobuf:"varint,3,opt,name=affix_tab,json=affixTab,proto3,oneof" json:"affix_tab,omitempty"`
	AffixTabOrder            *int32   `protobuf:"varint,4,opt,name=affix_tab_order,json=affixTabOrder,proto3,oneof" json:"affix_tab_order,omitempty"`
	Authority                []string `protobuf:"bytes,5,rep,name=authority,proto3" json:"authority,omitempty"`
	Badge                    *string  `protobuf:"bytes,6,opt,name=badge,proto3,oneof" json:"badge,omitempty"`
	BadgeType                *string  `protobuf:"bytes,7,opt,name=badge_type,json=badgeType,proto3,oneof" json:"badge_type,omitempty"`
	BadgeVariants            *string  `protobuf:"bytes,8,opt,name=badge_variants,json=badgeVariants,proto3,oneof" json:"badge_variants,omitempty"`
	HideChildrenInMenu       *bool    `protobuf:"varint,9,opt,name=hide_children_in_menu,json=hideChildrenInMenu,proto3,oneof" json:"hide_children_in_menu,omitempty"`
	HideInBreadcrumb         *bool    `protobuf:"varint,10,opt,name=hide_in_breadcrumb,json=hideInBreadcrumb,proto3,oneof" json:"hide_in_breadcrumb,omitempty"`
	HideInMenu               *bool    `protobuf:"varint,11,opt,name=hide_in_menu,json=hideInMenu,proto3,oneof" json:"hide_in_menu,omitempty"`
	HideInTab                *bool    `protobuf:"varint,12,opt,name=hide_in_tab,json=hideInTab,proto3,oneof" json:"hide_in_tab,omitempty"`
	Icon                     *string  `protobuf:"bytes,13,opt,name=icon,proto3,oneof" json:"icon,omitempty"`
	IframeSrc                *string  `protobuf:"bytes,14,opt,name=iframe_src,json=iframeSrc,proto3,oneof" json:"iframe_src,omitempty"`
	IgnoreAccess             *bool    `protobuf:"varint,15,opt,name=ignore_access,json=ignoreAccess,proto3,oneof" json:"ignore_access,omitempty"`
	KeepAlive                *bool    `protobuf:"varint,16,opt,name=keep_alive,json=keepAlive,proto3,oneof" json:"keep_alive,omitempty"`
	Link                     *string  `protobuf:"bytes,17,opt,name=link,proto3,oneof" json:"link,omitempty"`
	Loaded                   *bool    `protobuf:"varint,18,opt,name=loaded,proto3,oneof" json:"loaded,omitempty"`
	MaxNumOfOpenTab          *int32   `protobuf:"varint,19,opt,name=max_num_of_open_tab,json=maxNumOfOpenTab,proto3,oneof" json:"max_num_of_open_tab,omitempty"`
	MenuVisibleWithForbidden *bool    `protobuf:"varint,20,opt,name=menu_visible_with_forbidden,json=menuVisibleWithForbidden,proto3,oneof" json:"menu_visible_with_forbidden,omitempty"`
	OpenInNewWindow          *bool    `protobuf:"varint,21,opt,name=open_in_new_window,json=openInNewWindow,proto3,oneof" json:"open_in_new_window,omitempty"`
	Order                    *int32   `protobuf:"varint,22,opt,name=order,proto3,oneof" json:"order,omitempty"`
	Title                    *string  `protobuf:"bytes,23,opt,name=title,proto3,oneof" json:"title,omitempty"`
}

func (x *RouteMeta) Reset() {
	*x = RouteMeta{}
	mi := &file_system_service_v1_menu_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RouteMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouteMeta) ProtoMessage() {}

func (x *RouteMeta) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouteMeta.ProtoReflect.Descriptor instead.
func (*RouteMeta) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{2}
}

func (x *RouteMeta) GetActiveIcon() string {
	if x != nil && x.ActiveIcon != nil {
		return *x.ActiveIcon
	}
	return ""
}

func (x *RouteMeta) GetActivePath() string {
	if x != nil && x.ActivePath != nil {
		return *x.ActivePath
	}
	return ""
}

func (x *RouteMeta) GetAffixTab() bool {
	if x != nil && x.AffixTab != nil {
		return *x.AffixTab
	}
	return false
}

func (x *RouteMeta) GetAffixTabOrder() int32 {
	if x != nil && x.AffixTabOrder != nil {
		return *x.AffixTabOrder
	}
	return 0
}

func (x *RouteMeta) GetAuthority() []string {
	if x != nil {
		return x.Authority
	}
	return nil
}

func (x *RouteMeta) GetBadge() string {
	if x != nil && x.Badge != nil {
		return *x.Badge
	}
	return ""
}

func (x *RouteMeta) GetBadgeType() string {
	if x != nil && x.BadgeType != nil {
		return *x.BadgeType
	}
	return ""
}

func (x *RouteMeta) GetBadgeVariants() string {
	if x != nil && x.BadgeVariants != nil {
		return *x.BadgeVariants
	}
	return ""
}

func (x *RouteMeta) GetHideChildrenInMenu() bool {
	if x != nil && x.HideChildrenInMenu != nil {
		return *x.HideChildrenInMenu
	}
	return false
}

func (x *RouteMeta) GetHideInBreadcrumb() bool {
	if x != nil && x.HideInBreadcrumb != nil {
		return *x.HideInBreadcrumb
	}
	return false
}

func (x *RouteMeta) GetHideInMenu() bool {
	if x != nil && x.HideInMenu != nil {
		return *x.HideInMenu
	}
	return false
}

func (x *RouteMeta) GetHideInTab() bool {
	if x != nil && x.HideInTab != nil {
		return *x.HideInTab
	}
	return false
}

func (x *RouteMeta) GetIcon() string {
	if x != nil && x.Icon != nil {
		return *x.Icon
	}
	return ""
}

func (x *RouteMeta) GetIframeSrc() string {
	if x != nil && x.IframeSrc != nil {
		return *x.IframeSrc
	}
	return ""
}

func (x *RouteMeta) GetIgnoreAccess() bool {
	if x != nil && x.IgnoreAccess != nil {
		return *x.IgnoreAccess
	}
	return false
}

func (x *RouteMeta) GetKeepAlive() bool {
	if x != nil && x.KeepAlive != nil {
		return *x.KeepAlive
	}
	return false
}

func (x *RouteMeta) GetLink() string {
	if x != nil && x.Link != nil {
		return *x.Link
	}
	return ""
}

func (x *RouteMeta) GetLoaded() bool {
	if x != nil && x.Loaded != nil {
		return *x.Loaded
	}
	return false
}

func (x *RouteMeta) GetMaxNumOfOpenTab() int32 {
	if x != nil && x.MaxNumOfOpenTab != nil {
		return *x.MaxNumOfOpenTab
	}
	return 0
}

func (x *RouteMeta) GetMenuVisibleWithForbidden() bool {
	if x != nil && x.MenuVisibleWithForbidden != nil {
		return *x.MenuVisibleWithForbidden
	}
	return false
}

func (x *RouteMeta) GetOpenInNewWindow() bool {
	if x != nil && x.OpenInNewWindow != nil {
		return *x.OpenInNewWindow
	}
	return false
}

func (x *RouteMeta) GetOrder() int32 {
	if x != nil && x.Order != nil {
		return *x.Order
	}
	return 0
}

func (x *RouteMeta) GetTitle() string {
	if x != nil && x.Title != nil {
		return *x.Title
	}
	return ""
}

// 查询菜单列表 - 回应
type ListMenuResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items []*Menu `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	Total int32   `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ListMenuResponse) Reset() {
	*x = ListMenuResponse{}
	mi := &file_system_service_v1_menu_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMenuResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMenuResponse) ProtoMessage() {}

func (x *ListMenuResponse) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMenuResponse.ProtoReflect.Descriptor instead.
func (*ListMenuResponse) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{3}
}

func (x *ListMenuResponse) GetItems() []*Menu {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListMenuResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

// 查询菜单详情 - 请求
type GetMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *GetMenuRequest) Reset() {
	*x = GetMenuRequest{}
	mi := &file_system_service_v1_menu_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMenuRequest) ProtoMessage() {}

func (x *GetMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMenuRequest.ProtoReflect.Descriptor instead.
func (*GetMenuRequest) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{4}
}

func (x *GetMenuRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

// 创建菜单 - 请求
type CreateMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId *uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	Menu       *Menu   `protobuf:"bytes,2,opt,name=menu,proto3" json:"menu,omitempty"`
}

func (x *CreateMenuRequest) Reset() {
	*x = CreateMenuRequest{}
	mi := &file_system_service_v1_menu_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateMenuRequest) ProtoMessage() {}

func (x *CreateMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateMenuRequest.ProtoReflect.Descriptor instead.
func (*CreateMenuRequest) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{5}
}

func (x *CreateMenuRequest) GetOperatorId() uint32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *CreateMenuRequest) GetMenu() *Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

// 更新菜单 - 请求
type UpdateMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId   *uint32                `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	Menu         *Menu                  `protobuf:"bytes,2,opt,name=menu,proto3" json:"menu,omitempty"`
	UpdateMask   *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	AllowMissing *bool                  `protobuf:"varint,4,opt,name=allow_missing,json=allowMissing,proto3,oneof" json:"allow_missing,omitempty"`
}

func (x *UpdateMenuRequest) Reset() {
	*x = UpdateMenuRequest{}
	mi := &file_system_service_v1_menu_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateMenuRequest) ProtoMessage() {}

func (x *UpdateMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateMenuRequest.ProtoReflect.Descriptor instead.
func (*UpdateMenuRequest) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateMenuRequest) GetOperatorId() uint32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *UpdateMenuRequest) GetMenu() *Menu {
	if x != nil {
		return x.Menu
	}
	return nil
}

func (x *UpdateMenuRequest) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

func (x *UpdateMenuRequest) GetAllowMissing() bool {
	if x != nil && x.AllowMissing != nil {
		return *x.AllowMissing
	}
	return false
}

// 删除菜单 - 请求
type DeleteMenuRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OperatorId *uint32 `protobuf:"varint,1,opt,name=operator_id,json=operatorId,proto3,oneof" json:"operator_id,omitempty"`
	Id         int32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteMenuRequest) Reset() {
	*x = DeleteMenuRequest{}
	mi := &file_system_service_v1_menu_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMenuRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMenuRequest) ProtoMessage() {}

func (x *DeleteMenuRequest) ProtoReflect() protoreflect.Message {
	mi := &file_system_service_v1_menu_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMenuRequest.ProtoReflect.Descriptor instead.
func (*DeleteMenuRequest) Descriptor() ([]byte, []int) {
	return file_system_service_v1_menu_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteMenuRequest) GetOperatorId() uint32 {
	if x != nil && x.OperatorId != nil {
		return *x.OperatorId
	}
	return 0
}

func (x *DeleteMenuRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

var File_system_service_v1_menu_proto protoreflect.FileDescriptor

var file_system_service_v1_menu_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x6e, 0x75, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x11,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x24, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x33, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x08, 0x0a, 0x04, 0x4d, 0x65, 0x6e, 0x75, 0x12,
	0x26, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x11, 0xe0, 0x41, 0x01,
	0xba, 0x47, 0x0b, 0x92, 0x02, 0x08, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x02, 0x69, 0x64, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x42, 0x14, 0xe0, 0x41, 0x01, 0xba,
	0x47, 0x0e, 0x92, 0x02, 0x0b, 0xe7, 0x88, 0xb6, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0x49, 0x44,
	0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x22, 0xba, 0x47, 0x1f, 0xc2, 0x01, 0x04, 0x12, 0x02, 0x4f, 0x4e, 0xc2, 0x01, 0x05, 0x12, 0x03,
	0x4f, 0x46, 0x46, 0x8a, 0x02, 0x04, 0x1a, 0x02, 0x4f, 0x4e, 0x92, 0x02, 0x06, 0xe7, 0x8a, 0xb6,
	0xe6, 0x80, 0x81, 0x48, 0x02, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01,
	0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x42, 0x17, 0xba, 0x47, 0x14,
	0x8a, 0x02, 0x08, 0x1a, 0x06, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x92, 0x02, 0x06, 0xe7, 0xb1,
	0xbb, 0xe5, 0x9e, 0x8b, 0x48, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12,
	0x4d, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x42, 0x18, 0xe0, 0x41, 0x01, 0xba,
	0x47, 0x12, 0x92, 0x02, 0x0f, 0xe5, 0xad, 0x90, 0xe8, 0x8a, 0x82, 0xe7, 0x82, 0xb9, 0xe5, 0x88,
	0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2e,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe0, 0x41,
	0x01, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xb7, 0xaf,
	0xe5, 0xbe, 0x84, 0x48, 0x04, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x39,
	0x0a, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe9, 0x87, 0x8d, 0xe5, 0xae,
	0x9a, 0xe5, 0x90, 0x91, 0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x48, 0x05, 0x52, 0x08, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x0f,
	0x92, 0x02, 0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x88, 0xab, 0xe5, 0x90, 0x8d, 0x48,
	0x06, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x42, 0x6c, 0xe0, 0x41, 0x01, 0xba,
	0x47, 0x66, 0x92, 0x02, 0x63, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x91, 0xbd, 0xe5, 0x90,
	0x8d, 0xef, 0xbc, 0x8c, 0xe7, 0x84, 0xb6, 0xe5, 0x90, 0x8e, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac,
	0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x20, 0x6e, 0x61, 0x6d,
	0x65, 0x20, 0xe8, 0x80, 0x8c, 0xe4, 0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0x20, 0x70, 0x61, 0x74, 0x68,
	0x20, 0xe6, 0x9d, 0xa5, 0xe4, 0xbc, 0xa0, 0xe9, 0x80, 0x92, 0x20, 0x74, 0x6f, 0x20, 0xe5, 0xb1,
	0x9e, 0xe6, 0x80, 0xa7, 0xe7, 0xbb, 0x99, 0x20, 0x3c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d,
	0x6c, 0x69, 0x6e, 0x6b, 0x3e, 0xe3, 0x80, 0x82, 0x48, 0x07, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x12, 0x92, 0x02,
	0x0f, 0xe6, 0x8c, 0x87, 0xe5, 0x90, 0x91, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6,
	0x48, 0x08, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01,
	0x12, 0x4f, 0x0a, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x18, 0xe0, 0x41,
	0x01, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x85, 0x83,
	0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf, 0x48, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01,
	0x01, 0x12, 0x40, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x48, 0x0a, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x48, 0x0b, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x0c, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x69, 0x64, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x42, 0x09, 0x0a, 0x07,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65,
	0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x22, 0xb8, 0x04, 0x0a, 0x09, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x38,
	0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x2e, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x0f, 0x92, 0x02,
	0x0c, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x48, 0x00, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x39, 0x0a, 0x08, 0x72, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xe0, 0x41, 0x01, 0xba,
	0x47, 0x12, 0x92, 0x02, 0x0f, 0xe9, 0x87, 0x8d, 0xe5, 0xae, 0x9a, 0xe5, 0x90, 0x91, 0xe5, 0x9c,
	0xb0, 0xe5, 0x9d, 0x80, 0x48, 0x01, 0x52, 0x08, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x15, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x0f, 0x92, 0x02, 0x0c, 0xe8, 0xb7, 0xaf,
	0xe7, 0x94, 0xb1, 0xe5, 0x88, 0xab, 0xe5, 0x90, 0x8d, 0x48, 0x02, 0x52, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x85, 0x01, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x6c, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x66, 0x92, 0x02, 0x63, 0xe8,
	0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x91, 0xbd, 0xe5, 0x90, 0x8d, 0xef, 0xbc, 0x8c, 0xe7, 0x84,
	0xb6, 0xe5, 0x90, 0x8e, 0xe6, 0x88, 0x91, 0xe4, 0xbb, 0xac, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5,
	0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0xe8, 0x80, 0x8c, 0xe4,
	0xb8, 0x8d, 0xe6, 0x98, 0xaf, 0x20, 0x70, 0x61, 0x74, 0x68, 0x20, 0xe6, 0x9d, 0xa5, 0xe4, 0xbc,
	0xa0, 0xe9, 0x80, 0x92, 0x20, 0x74, 0x6f, 0x20, 0xe5, 0xb1, 0x9e, 0xe6, 0x80, 0xa7, 0xe7, 0xbb,
	0x99, 0x20, 0x3c, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x2d, 0x6c, 0x69, 0x6e, 0x6b, 0x3e, 0xe3,
	0x80, 0x82, 0x48, 0x03, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a,
	0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x18, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x12, 0x92, 0x02, 0x0f, 0xe6, 0x8c, 0x87, 0xe5, 0x90,
	0x91, 0xe7, 0x9a, 0x84, 0xe7, 0xbb, 0x84, 0xe4, 0xbb, 0xb6, 0x48, 0x04, 0x52, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4f, 0x0a, 0x04, 0x6d, 0x65,
	0x74, 0x61, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x42, 0x18, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x12, 0x92, 0x02,
	0x0f, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x85, 0x83, 0xe4, 0xbf, 0xa1, 0xe6, 0x81, 0xaf,
	0x48, 0x05, 0x52, 0x04, 0x6d, 0x65, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x70, 0x61, 0x74, 0x68, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x22, 0xa2, 0x12, 0x0a, 0x09,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x53, 0x0a, 0x0b, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2d,
	0xe0, 0x41, 0x01, 0xba, 0x47, 0x27, 0x92, 0x02, 0x24, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe5,
	0x9b, 0xbe, 0xe6, 0xa0, 0x87, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xef, 0xbc,
	0x9a, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe3, 0x80, 0x81, 0x74, 0x61, 0x62, 0x48, 0x00, 0x52,
	0x0a, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x49, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x8c,
	0x01, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x66, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x60, 0x92, 0x02, 0x5d, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x9a, 0x84, 0xe8, 0x8f,
	0x9c, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x8c, 0xe6, 0x9c, 0x89, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99,
	0xe4, 0xb8, 0x8d, 0xe6, 0x83, 0xb3, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x8e, 0xb0, 0xe6,
	0x9c, 0x89, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8, 0xa6,
	0x81, 0xe6, 0xbf, 0x80, 0xe6, 0xb4, 0xbb, 0xe7, 0x88, 0xb6, 0xe7, 0xba, 0xa7, 0xe8, 0x8f, 0x9c,
	0xe5, 0x8d, 0x95, 0xe6, 0x97, 0xb6, 0xe4, 0xbd, 0xbf, 0xe7, 0x94, 0xa8, 0x48, 0x01, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x61, 0x74, 0x68, 0x88, 0x01, 0x01, 0x12, 0x40, 0x0a,
	0x09, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1e, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe6, 0x98, 0xaf, 0xe5, 0x90,
	0xa6, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1, 0xb5,
	0x48, 0x02, 0x52, 0x08, 0x61, 0x66, 0x66, 0x69, 0x78, 0x54, 0x61, 0x62, 0x88, 0x01, 0x01, 0x12,
	0x4e, 0x0a, 0x0f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x21, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x1b,
	0x92, 0x02, 0x18, 0xe5, 0x9b, 0xba, 0xe5, 0xae, 0x9a, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9,
	0xa1, 0xb5, 0xe7, 0x9a, 0x84, 0xe9, 0xa1, 0xba, 0xe5, 0xba, 0x8f, 0x48, 0x03, 0x52, 0x0d, 0x61,
	0x66, 0x66, 0x69, 0x78, 0x54, 0x61, 0x62, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12,
	0x60, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x42, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x3c, 0x92, 0x02, 0x39, 0xe6, 0x9d, 0x83,
	0xe9, 0x99, 0x90, 0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0xef, 0xbc, 0x8c, 0xe9, 0x9c, 0x80, 0xe8,
	0xa6, 0x81, 0xe7, 0x89, 0xb9, 0xe5, 0xae, 0x9a, 0xe7, 0x9a, 0x84, 0xe8, 0xa7, 0x92, 0xe8, 0x89,
	0xb2, 0xe6, 0xa0, 0x87, 0xe8, 0xaf, 0x86, 0xe6, 0x89, 0x8d, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5,
	0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x12, 0x2a, 0x0a, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0f, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x09, 0x92, 0x02, 0x06, 0xe5, 0xbe, 0xbd, 0xe6, 0xa0,
	0x87, 0x48, 0x04, 0x52, 0x05, 0x62, 0x61, 0x64, 0x67, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a,
	0x0a, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x28, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x22, 0xc2, 0x01, 0x05, 0x12, 0x03, 0x64, 0x6f,
	0x74, 0xc2, 0x01, 0x08, 0x12, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x92, 0x02, 0x0c, 0xe5,
	0xbe, 0xbd, 0xe6, 0xa0, 0x87, 0xe7, 0xb1, 0xbb, 0xe5, 0x9e, 0x8b, 0x48, 0x05, 0x52, 0x09, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x81, 0x01, 0x0a, 0x0e,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x55, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x4f, 0xc2, 0x01, 0x09, 0x12,
	0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0xc2, 0x01, 0x0d, 0x12, 0x0b, 0x64, 0x65, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x69, 0x76, 0x65, 0xc2, 0x01, 0x09, 0x12, 0x07, 0x70, 0x72, 0x69,
	0x6d, 0x61, 0x72, 0x79, 0xc2, 0x01, 0x09, 0x12, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0xc2, 0x01, 0x09, 0x12, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67, 0x92, 0x02, 0x0c, 0xe5,
	0xbe, 0xbd, 0xe6, 0xa0, 0x87, 0xe9, 0xa2, 0x9c, 0xe8, 0x89, 0xb2, 0x48, 0x06, 0x52, 0x0d, 0x62,
	0x61, 0x64, 0x67, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x6b, 0x0a, 0x15, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x42, 0x33,
	0xe0, 0x41, 0x01, 0xba, 0x47, 0x2d, 0x92, 0x02, 0x2a, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8,
	0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x90, 0xe7, 0xba, 0xa7, 0xe5, 0x9c,
	0xa8, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95,
	0xe7, 0x8e, 0xb0, 0x48, 0x07, 0x52, 0x12, 0x68, 0x69, 0x64, 0x65, 0x43, 0x68, 0x69, 0x6c, 0x64,
	0x72, 0x65, 0x6e, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01, 0x01, 0x12, 0x60, 0x0a, 0x12,
	0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75,
	0x6d, 0x62, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2d, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x27,
	0x92, 0x02, 0x24, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5,
	0x9c, 0xa8, 0xe9, 0x9d, 0xa2, 0xe5, 0x8c, 0x85, 0xe5, 0xb1, 0x91, 0xe4, 0xb8, 0xad, 0xe4, 0xb8,
	0x8d, 0xe5, 0xb1, 0x95, 0xe7, 0x8e, 0xb0, 0x48, 0x08, 0x52, 0x10, 0x68, 0x69, 0x64, 0x65, 0x49,
	0x6e, 0x42, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x88, 0x01, 0x01, 0x12, 0x51,
	0x0a, 0x0c, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0xe5,
	0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xa8, 0xe8, 0x8f,
	0x9c, 0xe5, 0x8d, 0x95, 0xe4, 0xb8, 0xad, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7, 0x8e, 0xb0,
	0x48, 0x09, 0x52, 0x0a, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x4d, 0x65, 0x6e, 0x75, 0x88, 0x01,
	0x01, 0x12, 0x4f, 0x0a, 0x0b, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x24, 0x92, 0x02,
	0x21, 0xe5, 0xbd, 0x93, 0xe5, 0x89, 0x8d, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe5, 0x9c, 0xa8,
	0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1, 0xb5, 0xe4, 0xb8, 0x8d, 0xe5, 0xb1, 0x95, 0xe7,
	0x8e, 0xb0, 0x48, 0x0a, 0x52, 0x09, 0x68, 0x69, 0x64, 0x65, 0x49, 0x6e, 0x54, 0x61, 0x62, 0x88,
	0x01, 0x01, 0x12, 0x46, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x2d, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x27, 0x92, 0x02, 0x24, 0xe5, 0x9b, 0xbe, 0xe6, 0xa0,
	0x87, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8, 0xe4, 0xba, 0x8e, 0xef, 0xbc, 0x9a, 0xe8, 0x8f, 0x9c,
	0xe5, 0x8d, 0x95, 0xe3, 0x80, 0x81, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1, 0xb5, 0x48,
	0x0b, 0x52, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x69, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xe0, 0x41, 0x01, 0xba, 0x47, 0x10, 0x92, 0x02, 0x0d, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x20,
	0xe5, 0x9c, 0xb0, 0xe5, 0x9d, 0x80, 0x48, 0x0c, 0x52, 0x09, 0x69, 0x66, 0x72, 0x61, 0x6d, 0x65,
	0x53, 0x72, 0x63, 0x88, 0x01, 0x01, 0x12, 0x54, 0x0a, 0x0d, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65,
	0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2a, 0xe0,
	0x41, 0x01, 0xba, 0x47, 0x24, 0x92, 0x02, 0x21, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe6, 0x9d,
	0x83, 0xe9, 0x99, 0x90, 0xef, 0xbc, 0x8c, 0xe7, 0x9b, 0xb4, 0xe6, 0x8e, 0xa5, 0xe5, 0x8f, 0xaf,
	0xe4, 0xbb, 0xa5, 0xe8, 0xae, 0xbf, 0xe9, 0x97, 0xae, 0x48, 0x0d, 0x52, 0x0c, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x88, 0x01, 0x01, 0x12, 0x42, 0x0a, 0x0a,
	0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x1e, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x18, 0x92, 0x02, 0x15, 0xe5, 0xbc, 0x80, 0xe5, 0x90,
	0xaf, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0xe7, 0xbc, 0x93, 0xe5, 0xad, 0x98,
	0x48, 0x0e, 0x52, 0x09, 0x6b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x35, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c,
	0xe0, 0x41, 0x01, 0xba, 0x47, 0x16, 0x92, 0x02, 0x13, 0xe5, 0xa4, 0x96, 0xe9, 0x93, 0xbe, 0x2d,
	0xe8, 0xb7, 0xb3, 0xe8, 0xbd, 0xac, 0xe8, 0xb7, 0xaf, 0xe5, 0xbe, 0x84, 0x48, 0x0f, 0x52, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x88, 0x01, 0x01, 0x12, 0x41, 0x0a, 0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x1e, 0x92,
	0x02, 0x1b, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0xe6, 0x98, 0xaf, 0xe5, 0x90, 0xa6, 0xe5, 0xb7,
	0xb2, 0xe7, 0xbb, 0x8f, 0xe5, 0x8a, 0xa0, 0xe8, 0xbd, 0xbd, 0xe8, 0xbf, 0x87, 0x48, 0x10, 0x52,
	0x06, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x57, 0x0a, 0x13, 0x6d, 0x61,
	0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x61,
	0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05, 0x42, 0x24, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x1e, 0x92,
	0x02, 0x1b, 0xe6, 0xa0, 0x87, 0xe7, 0xad, 0xbe, 0xe9, 0xa1, 0xb5, 0xe6, 0x9c, 0x80, 0xe5, 0xa4,
	0xa7, 0xe6, 0x89, 0x93, 0xe5, 0xbc, 0x80, 0xe6, 0x95, 0xb0, 0xe9, 0x87, 0x8f, 0x48, 0x11, 0x52,
	0x0f, 0x6d, 0x61, 0x78, 0x4e, 0x75, 0x6d, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x61, 0x62,
	0x88, 0x01, 0x01, 0x12, 0x83, 0x01, 0x0a, 0x1b, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x76, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64,
	0x64, 0x65, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x42, 0x3f, 0xe0, 0x41, 0x01, 0xba, 0x47,
	0x39, 0x92, 0x02, 0x36, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d, 0x95, 0xe5, 0x8f, 0xaf, 0xe4, 0xbb, 0xa5,
	0xe7, 0x9c, 0x8b, 0xe5, 0x88, 0xb0, 0xef, 0xbc, 0x8c, 0xe4, 0xbd, 0x86, 0xe6, 0x98, 0xaf, 0xe8,
	0xae, 0xbf, 0xe9, 0x97, 0xae, 0xe4, 0xbc, 0x9a, 0xe8, 0xa2, 0xab, 0xe9, 0x87, 0x8d, 0xe5, 0xae,
	0x9a, 0xe5, 0x90, 0x91, 0xe5, 0x88, 0xb0, 0x34, 0x30, 0x33, 0x48, 0x12, 0x52, 0x18, 0x6d, 0x65,
	0x6e, 0x75, 0x56, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x57, 0x69, 0x74, 0x68, 0x46, 0x6f, 0x72,
	0x62, 0x69, 0x64, 0x64, 0x65, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4d, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1b, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x15, 0x92, 0x02, 0x12,
	0xe5, 0x9c, 0xa8, 0xe6, 0x96, 0xb0, 0xe7, 0xaa, 0x97, 0xe5, 0x8f, 0xa3, 0xe6, 0x89, 0x93, 0xe5,
	0xbc, 0x80, 0x48, 0x13, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x4e, 0x65, 0x77, 0x57,
	0x69, 0x6e, 0x64, 0x6f, 0x77, 0x88, 0x01, 0x01, 0x12, 0x49, 0x0a, 0x05, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x42, 0x2e, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x28, 0x92,
	0x02, 0x25, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x49, 0x44, 0xef, 0xbc, 0x8c, 0xe7, 0x94, 0xa8,
	0xe4, 0xba, 0x8e, 0xe8, 0xb7, 0xaf, 0xe7, 0x94, 0xb1, 0x2d, 0x3e, 0xe8, 0x8f, 0x9c, 0xe5, 0x8d,
	0x95, 0xe6, 0x8e, 0x92, 0xe5, 0xba, 0x8f, 0x48, 0x14, 0x52, 0x05, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x30, 0xe0, 0x41, 0x01, 0xba, 0x47, 0x2a, 0x92, 0x02, 0x27, 0xe6, 0xa0, 0x87,
	0xe9, 0xa2, 0x98, 0xe5, 0x90, 0x8d, 0xe7, 0xa7, 0xb0, 0xef, 0xbc, 0x8c, 0xe8, 0xb7, 0xaf, 0xe7,
	0x94, 0xb1, 0xe4, 0xb8, 0x8a, 0xe6, 0x98, 0xbe, 0xe7, 0xa4, 0xba, 0xe7, 0x9a, 0x84, 0xe6, 0xa0,
	0x87, 0xe9, 0xa2, 0x98, 0x48, 0x15, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x69, 0x63, 0x6f, 0x6e,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x61, 0x66, 0x66, 0x69, 0x78, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x42, 0x11, 0x0a, 0x0f, 0x5f,
	0x62, 0x61, 0x64, 0x67, 0x65, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x42, 0x18,
	0x0a, 0x16, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x64, 0x63, 0x72, 0x75, 0x6d, 0x62, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x65, 0x6e, 0x75,
	0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x68, 0x69, 0x64, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x61, 0x62,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x69, 0x63, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x69, 0x66,
	0x72, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x72, 0x63, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x69, 0x67, 0x6e,
	0x6f, 0x72, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6b,
	0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6c, 0x69,
	0x6e, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x42, 0x16, 0x0a,
	0x14, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x66, 0x5f, 0x6f, 0x70, 0x65,
	0x6e, 0x5f, 0x74, 0x61, 0x62, 0x42, 0x1e, 0x0a, 0x1c, 0x5f, 0x6d, 0x65, 0x6e, 0x75, 0x5f, 0x76,
	0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x64, 0x65, 0x6e, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69,
	0x6e, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x42, 0x08, 0x0a, 0x06,
	0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x08, 0x0a, 0x06, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x22, 0x57, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x20, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0x8e, 0x01, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xba, 0x47, 0x13, 0x18, 0x01, 0x92, 0x02, 0x0e,
	0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x48, 0x00,
	0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x42, 0x0e, 0x0a, 0x0c,
	0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x22, 0xc1, 0x03, 0x0a,
	0x11, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xba, 0x47, 0x13, 0x18, 0x01, 0x92, 0x02,
	0x0e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7, 0x49, 0x44, 0x48,
	0x00, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2b, 0x0a, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x04, 0x6d, 0x65, 0x6e, 0x75, 0x12, 0x73, 0x0a,
	0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x42, 0x36,
	0xba, 0x47, 0x33, 0x3a, 0x16, 0x12, 0x14, 0x69, 0x64, 0x2c, 0x72, 0x65, 0x61, 0x6c, 0x4e, 0x61,
	0x6d, 0x65, 0x2c, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x92, 0x02, 0x18, 0xe8, 0xa6,
	0x81, 0xe6, 0x9b, 0xb4, 0xe6, 0x96, 0xb0, 0xe7, 0x9a, 0x84, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5,
	0xe5, 0x88, 0x97, 0xe8, 0xa1, 0xa8, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x12, 0xa9, 0x01, 0x0a, 0x0d, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x7f, 0xba, 0x47, 0x7c, 0x92,
	0x02, 0x79, 0xe5, 0xa6, 0x82, 0xe6, 0x9e, 0x9c, 0xe8, 0xae, 0xbe, 0xe7, 0xbd, 0xae, 0xe4, 0xb8,
	0xba, 0x74, 0x72, 0x75, 0x65, 0xe7, 0x9a, 0x84, 0xe6, 0x97, 0xb6, 0xe5, 0x80, 0x99, 0xef, 0xbc,
	0x8c, 0xe8, 0xb5, 0x84, 0xe6, 0xba, 0x90, 0xe4, 0xb8, 0x8d, 0xe5, 0xad, 0x98, 0xe5, 0x9c, 0xa8,
	0xe5, 0x88, 0x99, 0xe4, 0xbc, 0x9a, 0xe6, 0x96, 0xb0, 0xe5, 0xa2, 0x9e, 0xef, 0xbc, 0x8c, 0xe5,
	0xb9, 0xb6, 0xe4, 0xb8, 0x94, 0xe5, 0x9c, 0xa8, 0xe8, 0xbf, 0x99, 0xe7, 0xa7, 0x8d, 0xe6, 0x83,
	0x85, 0xe5, 0x86, 0xb5, 0xe4, 0xb8, 0x8b, 0x60, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x73, 0x6b, 0x60, 0xe5, 0xad, 0x97, 0xe6, 0xae, 0xb5, 0xe5, 0xb0, 0x86, 0xe4, 0xbc, 0x9a, 0xe8,
	0xa2, 0xab, 0xe5, 0xbf, 0xbd, 0xe7, 0x95, 0xa5, 0xe3, 0x80, 0x82, 0x48, 0x01, 0x52, 0x0c, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x42, 0x0e,
	0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x42, 0x10,
	0x0a, 0x0e, 0x5f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67,
	0x22, 0x71, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x16, 0xba, 0x47, 0x13, 0x18,
	0x01, 0x92, 0x02, 0x0e, 0xe6, 0x93, 0x8d, 0xe4, 0xbd, 0x9c, 0xe7, 0x94, 0xa8, 0xe6, 0x88, 0xb7,
	0x49, 0x44, 0x48, 0x00, 0x52, 0x0a, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x69, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x5f, 0x69, 0x64, 0x2a, 0x2c, 0x0a, 0x08, 0x4d, 0x65, 0x6e, 0x75, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x45, 0x4e, 0x55, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x55, 0x54, 0x54, 0x4f, 0x4e, 0x10,
	0x02, 0x32, 0x8e, 0x03, 0x0a, 0x0b, 0x4d, 0x65, 0x6e, 0x75, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x4c, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x19, 0x2e,
	0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x23, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x47, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x21, 0x2e, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x65, 0x6e, 0x75, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x6e, 0x75, 0x12, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x4d, 0x65, 0x6e, 0x75, 0x12, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x6e, 0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x00, 0x12, 0x4c, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65,
	0x6e, 0x75, 0x12, 0x24, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4d, 0x65, 0x6e,
	0x75, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x00, 0x42, 0xc7, 0x01, 0x0a, 0x15, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x4d, 0x65,
	0x6e, 0x75, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3d, 0x6b, 0x72, 0x61, 0x74, 0x6f,
	0x73, 0x2d, 0x6d, 0x6f, 0x6e, 0x6f, 0x6c, 0x69, 0x74, 0x68, 0x69, 0x63, 0x2d, 0x64, 0x65, 0x6d,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x53, 0x58, 0xaa, 0x02,
	0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x56, 0x31, 0xca, 0x02, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1d, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x13, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x3a,
	0x3a, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_system_service_v1_menu_proto_rawDescOnce sync.Once
	file_system_service_v1_menu_proto_rawDescData = file_system_service_v1_menu_proto_rawDesc
)

func file_system_service_v1_menu_proto_rawDescGZIP() []byte {
	file_system_service_v1_menu_proto_rawDescOnce.Do(func() {
		file_system_service_v1_menu_proto_rawDescData = protoimpl.X.CompressGZIP(file_system_service_v1_menu_proto_rawDescData)
	})
	return file_system_service_v1_menu_proto_rawDescData
}

var file_system_service_v1_menu_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_system_service_v1_menu_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_system_service_v1_menu_proto_goTypes = []any{
	(MenuType)(0),                 // 0: system.service.v1.MenuType
	(*Menu)(nil),                  // 1: system.service.v1.Menu
	(*RouteItem)(nil),             // 2: system.service.v1.RouteItem
	(*RouteMeta)(nil),             // 3: system.service.v1.RouteMeta
	(*ListMenuResponse)(nil),      // 4: system.service.v1.ListMenuResponse
	(*GetMenuRequest)(nil),        // 5: system.service.v1.GetMenuRequest
	(*CreateMenuRequest)(nil),     // 6: system.service.v1.CreateMenuRequest
	(*UpdateMenuRequest)(nil),     // 7: system.service.v1.UpdateMenuRequest
	(*DeleteMenuRequest)(nil),     // 8: system.service.v1.DeleteMenuRequest
	(*timestamppb.Timestamp)(nil), // 9: google.protobuf.Timestamp
	(*fieldmaskpb.FieldMask)(nil), // 10: google.protobuf.FieldMask
	(*v1.PagingRequest)(nil),      // 11: pagination.PagingRequest
	(*emptypb.Empty)(nil),         // 12: google.protobuf.Empty
}
var file_system_service_v1_menu_proto_depIdxs = []int32{
	0,  // 0: system.service.v1.Menu.type:type_name -> system.service.v1.MenuType
	1,  // 1: system.service.v1.Menu.children:type_name -> system.service.v1.Menu
	3,  // 2: system.service.v1.Menu.meta:type_name -> system.service.v1.RouteMeta
	9,  // 3: system.service.v1.Menu.create_time:type_name -> google.protobuf.Timestamp
	9,  // 4: system.service.v1.Menu.update_time:type_name -> google.protobuf.Timestamp
	9,  // 5: system.service.v1.Menu.delete_time:type_name -> google.protobuf.Timestamp
	2,  // 6: system.service.v1.RouteItem.children:type_name -> system.service.v1.RouteItem
	3,  // 7: system.service.v1.RouteItem.meta:type_name -> system.service.v1.RouteMeta
	1,  // 8: system.service.v1.ListMenuResponse.items:type_name -> system.service.v1.Menu
	1,  // 9: system.service.v1.CreateMenuRequest.menu:type_name -> system.service.v1.Menu
	1,  // 10: system.service.v1.UpdateMenuRequest.menu:type_name -> system.service.v1.Menu
	10, // 11: system.service.v1.UpdateMenuRequest.update_mask:type_name -> google.protobuf.FieldMask
	11, // 12: system.service.v1.MenuService.ListMenu:input_type -> pagination.PagingRequest
	5,  // 13: system.service.v1.MenuService.GetMenu:input_type -> system.service.v1.GetMenuRequest
	6,  // 14: system.service.v1.MenuService.CreateMenu:input_type -> system.service.v1.CreateMenuRequest
	7,  // 15: system.service.v1.MenuService.UpdateMenu:input_type -> system.service.v1.UpdateMenuRequest
	8,  // 16: system.service.v1.MenuService.DeleteMenu:input_type -> system.service.v1.DeleteMenuRequest
	4,  // 17: system.service.v1.MenuService.ListMenu:output_type -> system.service.v1.ListMenuResponse
	1,  // 18: system.service.v1.MenuService.GetMenu:output_type -> system.service.v1.Menu
	12, // 19: system.service.v1.MenuService.CreateMenu:output_type -> google.protobuf.Empty
	12, // 20: system.service.v1.MenuService.UpdateMenu:output_type -> google.protobuf.Empty
	12, // 21: system.service.v1.MenuService.DeleteMenu:output_type -> google.protobuf.Empty
	17, // [17:22] is the sub-list for method output_type
	12, // [12:17] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_system_service_v1_menu_proto_init() }
func file_system_service_v1_menu_proto_init() {
	if File_system_service_v1_menu_proto != nil {
		return
	}
	file_system_service_v1_menu_proto_msgTypes[0].OneofWrappers = []any{}
	file_system_service_v1_menu_proto_msgTypes[1].OneofWrappers = []any{}
	file_system_service_v1_menu_proto_msgTypes[2].OneofWrappers = []any{}
	file_system_service_v1_menu_proto_msgTypes[5].OneofWrappers = []any{}
	file_system_service_v1_menu_proto_msgTypes[6].OneofWrappers = []any{}
	file_system_service_v1_menu_proto_msgTypes[7].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_system_service_v1_menu_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_system_service_v1_menu_proto_goTypes,
		DependencyIndexes: file_system_service_v1_menu_proto_depIdxs,
		EnumInfos:         file_system_service_v1_menu_proto_enumTypes,
		MessageInfos:      file_system_service_v1_menu_proto_msgTypes,
	}.Build()
	File_system_service_v1_menu_proto = out.File
	file_system_service_v1_menu_proto_rawDesc = nil
	file_system_service_v1_menu_proto_goTypes = nil
	file_system_service_v1_menu_proto_depIdxs = nil
}
