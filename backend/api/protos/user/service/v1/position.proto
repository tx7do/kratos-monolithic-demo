syntax = "proto3";

package user.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "pagination/v1/pagination.proto";

// 职位服务
service PositionService {
  // 查询职位列表
  rpc ListPosition (pagination.PagingRequest) returns (ListPositionResponse) {}

  // 查询职位详情
  rpc GetPosition (GetPositionRequest) returns (Position) {}

  // 创建职位
  rpc CreatePosition (CreatePositionRequest) returns (google.protobuf.Empty) {}

  // 更新职位
  rpc UpdatePosition (UpdatePositionRequest) returns (google.protobuf.Empty) {}

  // 删除职位
  rpc DeletePosition (DeletePositionRequest) returns (google.protobuf.Empty) {}
}

// 职位
message Position {
  uint32 id = 1;
  optional string name = 2;
  optional uint32 parentId = 3;
  optional int32 orderNo = 4;
  optional string code = 5;
  optional string status = 6 [(gnostic.openapi.v3.property) = {
    description: "状态"
    default: { string: "ON" }
    enum: [{yaml: "ON"}, {yaml: "OFF"}]
  }];
  optional string remark = 7;

  optional google.protobuf.Timestamp create_time = 30 [json_name = "createTime"];
  optional google.protobuf.Timestamp update_time = 31 [json_name = "updateTime"];
  optional google.protobuf.Timestamp delete_time = 32 [json_name = "deleteTime"];
}

// 获取职位列表 - 答复
message ListPositionResponse {
  repeated Position items = 1;
  int32 total = 2;
}

// 获取职位数据 - 请求
message GetPositionRequest {
  uint32 id = 1;
}

// 创建职位 - 请求
message CreatePositionRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ];

  Position position = 2;
}

// 更新职位 - 请求
message UpdatePositionRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ];

  Position position = 2;

  google.protobuf.FieldMask update_mask = 3 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realName,userName"}
    },
    json_name = "updateMask"
  ];

  optional bool allow_missing = 4 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ];
}

// 删除职位 - 请求
message DeletePositionRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ];

  uint32 id = 2;
}
