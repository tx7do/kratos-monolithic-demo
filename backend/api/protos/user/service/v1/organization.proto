syntax = "proto3";

package user.service.v1;

import "gnostic/openapi/v3/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";

import "pagination/v1/pagination.proto";

// 部门管理服务
service OrganizationService {
  // 查询部门列表
  rpc ListOrganization (pagination.PagingRequest) returns (ListOrganizationResponse) {}

  // 查询部门详情
  rpc GetOrganization (GetOrganizationRequest) returns (Organization) {}

  // 创建部门
  rpc CreateOrganization (CreateOrganizationRequest) returns (google.protobuf.Empty) {}

  // 更新部门
  rpc UpdateOrganization (UpdateOrganizationRequest) returns (google.protobuf.Empty) {}

  // 删除部门
  rpc DeleteOrganization (DeleteOrganizationRequest) returns (google.protobuf.Empty) {}
}

// 部门
message Organization {
  uint32 id = 1;
  optional string name = 2;
  optional uint32 parentId = 3;
  optional int32 orderNo = 4;
  optional string status = 5 [(gnostic.openapi.v3.property) = {
    description: "状态"
    default: {string: "ON"}
    enum: [{yaml: "ON"}, {yaml: "OFF"}]
  }];
  optional string remark = 6;
  repeated Organization children = 7;

  optional google.protobuf.Timestamp create_time = 30 [json_name = "createTime"];
  optional google.protobuf.Timestamp update_time = 31 [json_name = "updateTime"];
  optional google.protobuf.Timestamp delete_time = 32 [json_name = "deleteTime"];
}
// 部门列表 - 答复
message ListOrganizationResponse {
  repeated Organization items = 1;
  int32 total = 2;
}

// 部门数据 - 请求
message GetOrganizationRequest {
  uint32 id = 1;
}

// 创建部门 - 请求
message CreateOrganizationRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ];

  Organization org = 2;
}

// 更新部门 - 请求
message UpdateOrganizationRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ];

  Organization org = 2;

  google.protobuf.FieldMask update_mask = 3 [
    (gnostic.openapi.v3.property) = {
      description: "要更新的字段列表",
      example: {yaml : "id,realName,userName"}
    },
    json_name = "updateMask"
  ];

  optional bool allow_missing = 4 [
    (gnostic.openapi.v3.property) = {description: "如果设置为true的时候，资源不存在则会新增(插入)，并且在这种情况下`updateMask`字段将会被忽略。"},
    json_name = "allowMissing"
  ];
}

// 删除部门 - 请求
message DeleteOrganizationRequest {
  optional uint32 operator_id = 1 [
    (gnostic.openapi.v3.property) = {description: "操作用户ID", read_only: true},
    json_name = "operatorId"
  ];

  uint32 id = 2;
}
